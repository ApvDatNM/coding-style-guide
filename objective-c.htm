<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    

  <link crossorigin="anonymous" media="all" integrity="sha512-veKG2ootplNGLwNEW5It4+lJXwpdOVR1Ry4MBDNvdgL6OgBkiAXaZAZnIKkw6sIygnfGqQhR5q7UdS1llqd6/g==" rel="stylesheet" href="./objective-c_files/frameworks-bde286da8a2da653462f03445b922de3.css">
  
    <link crossorigin="anonymous" media="all" integrity="sha512-QU7sxL9jqzOEVzGJyA/srMb5y1UgwOTWJ2SL4UJx2Hl4DlGmnSTiFTRUUK1WAOSAlTzdsLHypOuAzWfXCWCRRw==" rel="stylesheet" href="./objective-c_files/github-414eecc4bf63ab3384573189c80fecac.css">
    
    
    
    


  <meta name="viewport" content="width=device-width">
  
    <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
  <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
  <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">

<meta name="octolytics-host" content="collector.githubapp.com"><meta name="octolytics-app-id" content="github"><meta name="octolytics-event-url" content="https://collector.githubapp.com/github-external/browser_event"><meta name="octolytics-dimension-ga_id" content="446732374.1590568273" class="js-octo-ga-id"><meta name="octolytics-actor-id" content="56908901"><meta name="octolytics-actor-login" content="ApvDatNM"><meta name="octolytics-actor-hash" content="e1f06bec01127a0f852e5342769f08e3e43e45b4485d52cf02984938ff741f33">



<meta name="optimizely-sdk-key" content="cowimJNste4j7QnBNCjaw">

    <meta name="google-analytics" content="UA-3769691-2">

  <meta class="js-ga-set" name="userId" content="8411330b7c5df91216141ef7b0acf43a">

<meta class="js-ga-set" name="dimension1" content="Logged In">



  

      <meta name="hostname" content="github.com">
    <meta name="user-login" content="ApvDatNM">

      <meta name="expected-hostname" content="github.com">

      <meta name="js-proxy-site-detection-payload" content="Y2Y2ZWI5ODIzZjE0YzE4ZmEzMjYwOWZlMzg5MDU3NzZiNzg2NTdmYjc5NDg2ZWU4NzhiNmY4MjNkYTJjZDE0Nnx7InJlbW90ZV9hZGRyZXNzIjoiNDUuMTI1LjIwOS43MSIsInJlcXVlc3RfaWQiOiJCRDlFOjcxM0E6MjRBODAzOjMxQTcyQTo1RUNFMjRGMyIsInRpbWVzdGFtcCI6MTU5MDU2ODE3OSwiaG9zdCI6ImdpdGh1Yi5jb20ifQ==">

    <meta name="enabled-features" content="MARKETPLACE_PENDING_INSTALLATIONS,PAGE_STALE_CHECK,JS_CHUNKING">

  <meta http-equiv="x-pjax-version" content="3e8d3b1d0df528e7deffc9321d6e47bc">
  

      <link href="https://github.com/ApvDatNM/coding-style-guide/commits/master.atom" rel="alternate" title="Recent Commits to coding-style-guide:master" type="application/atom+xml">

  <meta name="go-import" content="github.com/ApvDatNM/coding-style-guide git https://github.com/ApvDatNM/coding-style-guide.git">

  <meta name="octolytics-dimension-user_id" content="56908901"><meta name="octolytics-dimension-user_login" content="ApvDatNM"><meta name="octolytics-dimension-repository_id" content="267247614"><meta name="octolytics-dimension-repository_nwo" content="ApvDatNM/coding-style-guide"><meta name="octolytics-dimension-repository_public" content="true"><meta name="octolytics-dimension-repository_is_fork" content="false"><meta name="octolytics-dimension-repository_network_root_id" content="267247614"><meta name="octolytics-dimension-repository_network_root_nwo" content="ApvDatNM/coding-style-guide"><meta name="octolytics-dimension-repository_explore_github_marketplace_ci_cta_shown" content="false">


    


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://github.githubassets.com/pinned-octocat.svg" color="#000000">
  <link rel="alternate icon" class="js-site-favicon" type="image/png" href="https://github.githubassets.com/favicons/favicon.png">
  <link rel="icon" class="js-site-favicon" type="image/svg+xml" href="https://github.githubassets.com/favicons/favicon.svg">

<meta name="theme-color" content="#1e2327">


  <link rel="manifest" href="https://github.com/manifest.json" crossorigin="use-credentials">

  <meta name="selected-link" value="repo_source" data-pjax-transient=""><meta name="analytics-location" content="/<user-name>/<repo-name>/blob/show" data-pjax-transient=""><meta name="request-id" content="4460:7139:1BFEB3:260CD1:5ECE2520" data-pjax-transient=""><meta name="html-safe-nonce" content="81a88c21b76660f83c23d92ebfd6875d37786d28" data-pjax-transient=""><meta name="visitor-payload" content="eyJyZWZlcnJlciI6Imh0dHBzOi8vZ2l0aHViLmNvbS9BcHZEYXROTS9jb2Rpbmctc3R5bGUtZ3VpZGUiLCJyZXF1ZXN0X2lkIjoiNDQ2MDo3MTM5OjFCRkVCMzoyNjBDRDE6NUVDRTI1MjAiLCJ2aXNpdG9yX2lkIjoiMzA4NzU5MDc5MTY5NDMzMDU3NSIsInJlZ2lvbl9lZGdlIjoiYXAtc291dGhlYXN0LTEiLCJyZWdpb25fcmVuZGVyIjoiaWFkIn0=" data-pjax-transient=""><meta name="visitor-hmac" content="1968ae168d816625a3dfa028bbcc4f61ec3acf605f6d6ea6dce87c053788fa0c" data-pjax-transient=""><meta name="github-keyboard-shortcuts" content="repository,source-code" data-pjax-transient=""><link rel="canonical" href="https://github.com/ApvDatNM/coding-style-guide/blob/master/objective-c.md" data-pjax-transient=""><link href="https://github.com/ApvDatNM/coding-style-guide/commits/master.atom" rel="alternate" title="Recent Commits to coding-style-guide:master" type="application/atom+xml" data-pjax-transient=""></head>

  <body class="logged-in env-production min-width-lg intent-mouse"><audio class="audio-for-speech" src=""></audio><div class="translate-tooltip-mtz hidden">                    <div class="header">                        <div class="header-controls">                            <span class="sound-translate"></span>                            <span class="settings"></span>                        </div>                        <div class="translate-icons">                            <img class="from" src="">                            <img class="arrow" src="chrome-extension://gafjimepaiecpbmbmgaefokbekhoecaj/images/right-arrow.png">                            <img class="to" src="">                        </div>                    </div>                    <div class="translated-text">                        <div class="words"></div>                        <div class="sentences"></div>                    </div>                </div><span class="translate-button-mtz hidden"></span><audio class="audio-for-speech" src=""></audio><div class="translate-tooltip-mtz hidden">                    <div class="header">                        <div class="header-controls">                            <span class="sound-translate"></span>                            <span class="settings"></span>                        </div>                        <div class="translate-icons">                            <img class="from" src="https://github.com/ApvDatNM/coding-style-guide/blob/master/objective-c.md">                            <img class="arrow" src="chrome-extension://gafjimepaiecpbmbmgaefokbekhoecaj/images/right-arrow.png">                            <img class="to" src="https://github.com/ApvDatNM/coding-style-guide/blob/master/objective-c.md">                        </div>                    </div>                    <div class="translated-text">                        <div class="words"></div>                        <div class="sentences"></div>                    </div>                </div><span class="translate-button-mtz hidden"></span>
    
  <div id="start-of-content" class="show-on-focus"></div>




  <div class="application-main " data-commit-hovercards-enabled="">
        <div itemscope="" itemtype="http://schema.org/SoftwareSourceCode" class="">
    <main id="js-repo-pjax-container" data-pjax-container="">

<div class="container-lg clearfix new-discussion-timeline  p-responsive">
  <div class="repository-content ">

    
    

  


    <a class="d-none js-permalink-shortcut" data-hotkey="y" href="https://github.com/ApvDatNM/coding-style-guide/blob/c7a951ee8c5bfe74abc14a2daf95da13c55289a7/objective-c.md">Permalink</a>

    <!-- blob contrib key: blob_contributors:v22:8a96b30d2f4bc4891b9d713e0ef78210 -->
    

    <div class="d-flex flex-items-start flex-shrink-0 flex-column flex-md-row pb-3">
      <span class="d-flex flex-justify-between width-full width-md-auto">
      </span>
    </div>



    <div class="Box mt-3 position-relative">
  <div id="readme" class="Box-body readme blob js-code-block-container p-5 p-xl-6">
    <article class="markdown-body entry-content container-lg" itemprop="text">
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p>Here are some of the documents from Apple that informed the style guide. If something isn’t mentioned here, it’s probably covered in great detail in one of these:</p>
<ul>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html" rel="nofollow">The Objective-C Programming Language</a></li>
<li><a href="https://developer.apple.com/legacy/library/documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html" rel="nofollow">Cocoa Fundamentals Guide</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html" rel="nofollow">Coding Guidelines for Cocoa</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/iphone/conceptual/iphoneosprogrammingguide/Introduction/Introduction.html" rel="nofollow">iOS App Programming Guide</a></li>
</ul>
<p>This style guide conforms to IETF's <a href="http://tools.ietf.org/html/rfc2119" rel="nofollow">RFC 2119</a>. In particular, code which goes against the RECOMMENDED/SHOULD style is allowed, but should be carefully considered.</p>
<h2><a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#table-of-contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Table of Contents</h2>
<ul>
<li><a href="/coding-style-guide/objective-c.htm#dot-notation-syntax">Dot Notation Syntax</a></li>
<li><a href="/coding-style-guide/objective-c.htm#spacing">Spacing</a></li>
<li><a href="/coding-style-guide/objective-c.htm#conditionals">Conditionals</a>
<ul>
<li><a href="/coding-style-guide/objective-c.htm#ternary-operator">Ternary Operator</a></li>
</ul>
</li>
<li><a href="/coding-style-guide/objective-c.htm#error-handling">Error handling</a></li>
<li><a href="/coding-style-guide/objective-c.htm#methods">Methods</a></li>
<li><a href="/coding-style-guide/objective-c.htm#variables">Variables</a></li>
<li><a href="/coding-style-guide/objective-c.htm#naming">Naming</a>
<ul>
<li><a href="/coding-style-guide/objective-c.htm#categories">Categories</a></li>
</ul>
</li>
<li><a href="/coding-style-guide/objective-c.htm#comments">Comments</a></li>
<li><a href="/coding-style-guide/objective-c.htm#init-and-dealloc">Init &amp; Dealloc</a></li>
<li><a href="/coding-style-guide/objective-c.htm#literals">Literals</a></li>
<li><a href="/coding-style-guide/objective-c.htm#cgrect-functions">CGRect Functions</a></li>
<li><a href="/coding-style-guide/objective-c.htm#constants">Constants</a></li>
<li><a href="/coding-style-guide/objective-c.htm#enumerated-types">Enumerated Types</a></li>
<li><a href="/coding-style-guide/objective-c.htm#bitmasks">Bitmasks</a></li>
<li><a href="/coding-style-guide/objective-c.htm#private-properties">Private Properties</a></li>
<li><a href="/coding-style-guide/objective-c.htm#image-naming">Image Naming</a></li>
<li><a href="/coding-style-guide/objective-c.htm#booleans">Booleans</a></li>
<li><a href="/coding-style-guide/objective-c.htm#singletons">Singletons</a></li>
<li><a href="/coding-style-guide/objective-c.htm#imports">Imports</a></li>
<li><a href="/coding-style-guide/objective-c.htm#protocols">Protocols</a></li>
<li><a href="/coding-style-guide/objective-c.htm#xcode-project">Xcode Project</a></li>
</ul>
<h2><a id="user-content-dot-notation-syntax" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#dot-notation-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dot Notation Syntax</h2>
<p>Dot notation is RECOMMENDED over bracket notation for getting and setting properties.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre>view.backgroundColor = UIColor.orangeColor;
UIApplication.sharedApplication.delegate;</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre>[view <span class="pl-c1">setBackgroundColor:</span>[UIColor <span class="pl-c1">orangeColor</span>]];
[UIApplication <span class="pl-c1">sharedApplication</span>].delegate;</pre></div>
<h2><a id="user-content-spacing" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#spacing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Spacing</h2>
<ul>
<li>Indentation MUST use 4 spaces. Never indent with tabs. Be sure to set this preference in Xcode.</li>
<li>Method braces and other braces (<code>if</code>/<code>else</code>/<code>switch</code>/<code>while</code> etc.) MUST open on the same line as the statement. Braces MUST close on a new line.</li>
</ul>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">if</span> (user.isHappy) {
    <span class="pl-c"><span class="pl-c">//</span> Do something</span>
}
<span class="pl-k">else</span> {
    <span class="pl-c"><span class="pl-c">//</span> Do something else</span>
}</pre></div>
<ul>
<li>There SHOULD be exactly one blank line between methods to aid in visual clarity and organization.</li>
<li>Whitespace within methods MAY separate functionality, though this inclination often indicates an opportunity to split the method into several, smaller methods. In methods with long or verbose names, a single line of whitespace MAY be used to provide visual separation before the method’s body.</li>
<li><code>@synthesize</code> and <code>@dynamic</code> MUST each be declared on new lines in the implementation.</li>
</ul>
<h2><a id="user-content-conditionals" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#conditionals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conditionals</h2>
<p>Conditional bodies MUST use braces even when a conditional body could be written without braces (e.g., it is one line only) to prevent <a href="https://github.com/NYTimes/objective-c-style-guide/issues/26#issuecomment-22074256">errors</a>. These errors include adding a second line and expecting it to be part of the if-statement. Another, <a href="http://programmers.stackexchange.com/a/16530" rel="nofollow">even more dangerous defect</a> can happen where the line “inside” the if-statement is commented out, and the next line unwittingly becomes part of the if-statement. In addition, this style is more consistent with all other conditionals, and therefore more easily scannable.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">if</span> (!error) {
    <span class="pl-k">return</span> success;
}</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">if</span> (!error)
    <span class="pl-k">return</span> success;</pre></div>
<p>or</p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">if</span> (!error) <span class="pl-k">return</span> success;</pre></div>
<h3><a id="user-content-ternary-operator" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#ternary-operator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ternary Operator</h3>
<p>The intent of the ternary operator, <code>?</code> , is to increase clarity or code neatness. The ternary SHOULD only evaluate a single condition per expression. Evaluating multiple conditions is usually more understandable as an if statement or refactored into named variables.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre>result = a &gt; b ? x : y;</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre>result = a &gt; b ? x = c &gt; d ? c : d : y;</pre></div>
<h2><a id="user-content-error-handling" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#error-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Error Handling</h2>
<p>When methods return an error parameter by reference, code MUST switch on the returned value and MUST NOT switch on the error variable.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-c1">NSError</span> *error;
<span class="pl-k">if</span> (![<span class="pl-c1">self</span> <span class="pl-c1">trySomethingWithError:</span>&amp;error]) {
    <span class="pl-c"><span class="pl-c">//</span> Handle Error</span>
}</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-c1">NSError</span> *error;
[<span class="pl-c1">self</span> <span class="pl-c1">trySomethingWithError:</span>&amp;error];
<span class="pl-k">if</span> (error) {
    <span class="pl-c"><span class="pl-c">//</span> Handle Error</span>
}</pre></div>
<p>Some of Apple’s APIs write garbage values to the error parameter (if non-NULL) in successful cases, so switching on the error can cause false negatives (and subsequently crash).</p>
<h2><a id="user-content-methods" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Methods</h2>
<ul>
<li>In method signatures, there SHOULD be a space after the scope (<code>-</code> or <code>+</code> symbol). There SHOULD be a space between the method segments.</li>
</ul>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre>- (<span class="pl-k">void</span>)setExampleText:(<span class="pl-c1">NSString</span> *)text image:(UIImage *)image;</pre></div>
<ul>
<li>Methods exceeding 80 characters SHOULD be represented like a form with a new line after each argument</li>
</ul>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre>- (<span class="pl-k">void</span>)setExampleText:(<span class="pl-c1">NSString</span> *)text 
                 image:(UIImage *)image 
                 color:(UIColor *)color 
       alternativeText:(<span class="pl-c1">NSString</span> *)altText;</pre></div>
<h2><a id="user-content-variables" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Variables</h2>
<p>Variables SHOULD be named descriptively, with the variable’s name clearly communicating what the variable <em>is</em> and pertinent information a programmer needs to use that value properly.</p>
<p><strong>For example:</strong></p>
<ul>
<li><code>NSString *title</code>: It is reasonable to assume a “title” is a string.</li>
<li><code>NSString *titleHTML</code>: This indicates a title that may contain HTML which needs parsing for display. <em>“HTML” is needed for a programmer to use this variable effectively.</em></li>
<li><code>NSAttributedString *titleAttributedString</code>: A title, already formatted for display. <em><code>AttributedString</code> hints that this value is not just a vanilla title, and adding it could be a reasonable choice depending on context.</em></li>
<li><code>NSDate *now</code>: <em>No further clarification is needed.</em></li>
<li><code>NSDate *lastModifiedDate</code>: Simply <code>lastModified</code> can be ambiguous; depending on context, one could reasonably assume it is one of a few different types.</li>
<li><code>NSURL *URL</code> vs. <code>NSString *URLString</code>: In situations when a value can reasonably be represented by different classes, it is often useful to disambiguate in the variable’s name.</li>
<li><code>NSString *releaseDateString</code>: Another example where a value could be represented by another class, and the name can help disambiguate.</li>
</ul>
<p>Single letter variable names are NOT RECOMMENDED, except as simple counter variables in loops.</p>
<p>Asterisks indicating a type is a pointer MUST be “attached to” the variable name. <strong>For example,</strong> <code>NSString *text</code> <strong>not</strong> <code>NSString* text</code> or <code>NSString * text</code>, except in the case of constants (<code>NSString * const NYTConstantString</code>).</p>
<p>Property definitions SHOULD be used in place of naked instance variables whenever possible. Direct instance variable access SHOULD be avoided except in initializer methods (<code>init</code>, <code>initWithCoder:</code>, etc…), <code>dealloc</code> methods and within custom setters and getters. For more information, see <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW6" rel="nofollow">Apple’s docs on using accessor methods in initializer methods and <code>dealloc</code></a>.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">@interface</span> <span class="pl-en">NYTSection</span> : <span class="pl-e">NSObject</span>

<span class="pl-k">@property</span> (<span class="pl-k">nonatomic</span>) <span class="pl-c1">NSString</span> *headline;

<span class="pl-k">@end</span></pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">@interface</span> <span class="pl-en">NYTSection</span> : <span class="pl-e">NSObject</span> {
    <span class="pl-c1">NSString</span> *headline;
}</pre></div>
<h4><a id="user-content-variable-qualifiers" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#variable-qualifiers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Variable Qualifiers</h4>
<p>When it comes to the variable qualifiers <a href="https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226-CH1-SW4" rel="nofollow">introduced with ARC</a>, the qualifier (<code>__strong</code>, <code>__weak</code>, <code>__unsafe_unretained</code>, <code>__autoreleasing</code>) SHOULD be placed between the asterisks and the variable name, e.g., <code>NSString * __weak text</code>.</p>
<h2><a id="user-content-naming" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#naming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Naming</h2>
<p>Apple naming conventions SHOULD be adhered to wherever possible, especially those related to <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" rel="nofollow">memory management rules</a> (<a href="http://stackoverflow.com/a/2865194/340508" rel="nofollow">NARC</a>).</p>
<p>Long, descriptive method and variable names are good.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre>UIButton *settingsButton;</pre></div>
<p><strong>Not</strong></p>
<div class="highlight highlight-source-objc"><pre>UIButton *setBut;</pre></div>
<p>A three letter prefix (e.g., <code>NYT</code>) MUST be used for class names and constants, however MAY be omitted for Core Data entity names. Constants MUST be camel-case with all words capitalized and prefixed by the related class name for clarity. A two letter prefix (e.g., <code>NS</code>) is <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/DefiningClasses/DefiningClasses.html#//apple_ref/doc/uid/TP40011210-CH3-SW12" rel="nofollow">reserved for use by Apple</a>.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-c1">NSTimeInterval</span> NYTArticleViewControllerNavigationFadeAnimationDuration = <span class="pl-c1">0.3</span>;</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-c1">NSTimeInterval</span> fadetime = <span class="pl-c1">1.7</span>;</pre></div>
<p>Properties and local variables MUST be camel-case with the leading word being lowercase.</p>
<p>Instance variables MUST be camel-case with the leading word being lowercase, and MUST be prefixed with an underscore. This is consistent with instance variables synthesized automatically by LLVM. <strong>If LLVM can synthesize the variable automatically, then let it.</strong></p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre>@synthesize descriptiveVariableName = _descriptiveVariableName;</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-c1">id</span> varnm;</pre></div>
<h3><a id="user-content-categories" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#categories"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Categories</h3>
<p>Categories are RECOMMENDED to concisely segment functionality and should be named to describe that functionality.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">@interface</span> <span class="pl-en">UIViewController</span> (NYTMediaPlaying)
<span class="pl-k">@interface</span> <span class="pl-en">NSString</span> (NSStringEncodingDetection)</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">@interface</span> <span class="pl-en">NYTAdvertisement</span> (private)
<span class="pl-k">@interface</span> <span class="pl-en">NSString</span> (NYTAdditions)</pre></div>
<p>Methods and properties added in categories MUST be named with an app- or organization-specific prefix. This avoids unintentionally overriding an existing method, and it reduces the chance of two categories from different libraries adding a method of the same name. (The Objective-C runtime doesn’t specify which method will be called in the latter case, which can lead to unintended effects.)</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">@interface</span> <span class="pl-en">NSArray</span> (NYTAccessors)
- (<span class="pl-c1">id</span>)<span class="pl-en">nyt_objectOrNilAtIndex</span><span class="pl-en">:</span>(<span class="pl-c1">NSUInteger</span>)<span class="pl-smi">index</span>;
<span class="pl-k">@end</span></pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">@interface</span> <span class="pl-en">NSArray</span> (NYTAccessors)
- (<span class="pl-c1">id</span>)<span class="pl-en">objectOrNilAtIndex</span><span class="pl-en">:</span>(<span class="pl-c1">NSUInteger</span>)<span class="pl-smi">index</span>;
<span class="pl-k">@end</span></pre></div>
<h2><a id="user-content-comments" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#comments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Comments</h2>
<p>When they are needed, comments SHOULD be used to explain <strong>why</strong> a particular piece of code does something. Any comments that are used MUST be kept up-to-date or deleted.</p>
<p>Block comments are NOT RECOMMENDED, as code should be as self-documenting as possible, with only the need for intermittent, few-line explanations. This does not apply to those comments used to generate documentation.</p>
<h2><a id="user-content-init-and-dealloc" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#init-and-dealloc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>init and dealloc</h2>
<p><code>dealloc</code> methods SHOULD be placed at the top of the implementation, directly after the <code>@synthesize</code> and <code>@dynamic</code> statements. <code>init</code> methods SHOULD be placed directly below the <code>dealloc</code> methods of any class.</p>
<p><code>init</code> methods should be structured like this:</p>
<div class="highlight highlight-source-objc"><pre>- (<span class="pl-k">instancetype</span>)init {
    self = [<span class="pl-c1">super</span> <span class="pl-c1">init</span>]; <span class="pl-c"><span class="pl-c">//</span> or call the designated initializer</span>
    <span class="pl-k">if</span> (self) {
        <span class="pl-c"><span class="pl-c">//</span> Custom initialization</span>
    }
    <span class="pl-k">return</span> self;
}</pre></div>
<h2><a id="user-content-literals" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#literals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Literals</h2>
<p><code>NSString</code>, <code>NSDictionary</code>, <code>NSArray</code>, and <code>NSNumber</code> literals SHOULD be used whenever creating immutable instances of those objects. Pay special care that <code>nil</code> values not be passed into <code>NSArray</code> and <code>NSDictionary</code> literals, as this will cause a crash.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-c1">NSArray</span> *names = @[<span class="pl-s"><span class="pl-pds">@"</span>Brian<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Matt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Chris<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Alex<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Steve<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Paul<span class="pl-pds">"</span></span>];
<span class="pl-c1">NSDictionary</span> *productManagers = @{<span class="pl-s"><span class="pl-pds">@"</span>iPhone<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">@"</span>Kate<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>iPad<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">@"</span>Kamal<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Mobile Web<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">@"</span>Bill<span class="pl-pds">"</span></span>};
<span class="pl-c1">NSNumber</span> *shouldUseLiterals = @<span class="pl-c1">YES</span>;
<span class="pl-c1">NSNumber</span> *buildingZIPCode = @<span class="pl-c1">10018</span>;</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-c1">NSArray</span> *names = [<span class="pl-c1">NSArray</span> <span class="pl-c1">arrayWithObjects:</span><span class="pl-s"><span class="pl-pds">@"</span>Brian<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Matt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Chris<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Alex<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Steve<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Paul<span class="pl-pds">"</span></span>, <span class="pl-c1">nil</span>];
<span class="pl-c1">NSDictionary</span> *productManagers = [<span class="pl-c1">NSDictionary</span> <span class="pl-c1">dictionaryWithObjectsAndKeys:</span> <span class="pl-s"><span class="pl-pds">@"</span>Kate<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>iPhone<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Kamal<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>iPad<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Bill<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">@"</span>Mobile Web<span class="pl-pds">"</span></span>, <span class="pl-c1">nil</span>];
<span class="pl-c1">NSNumber</span> *shouldUseLiterals = [<span class="pl-c1">NSNumber</span> <span class="pl-c1">numberWithBool:</span><span class="pl-c1">YES</span>];
<span class="pl-c1">NSNumber</span> *buildingZIPCode = [<span class="pl-c1">NSNumber</span> <span class="pl-c1">numberWithInteger:</span><span class="pl-c1">10018</span>];</pre></div>
<h2><a id="user-content-cgrect-functions" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#cgrect-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>CGRect</code> Functions</h2>
<p>When accessing the <code>x</code>, <code>y</code>, <code>width</code>, or <code>height</code> of a <code>CGRect</code>, code MUST use the <a href="https://developer.apple.com/documentation/coregraphics/cggeometry" rel="nofollow"><code>CGGeometry</code> functions</a> instead of direct struct member access. From Apple's <code>CGGeometry</code> reference:</p>
<blockquote>
<p>All functions described in this reference that take CGRect data structures as inputs implicitly standardize those rectangles before calculating their results. For this reason, your applications should avoid directly reading and writing the data stored in the CGRect data structure. Instead, use the functions described here to manipulate rectangles and to retrieve their characteristics.</p>
</blockquote>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-c1">CGRect</span> frame = self.view.frame;

<span class="pl-c1">CGFloat</span> x = CGRectGetMinX(frame);
<span class="pl-c1">CGFloat</span> y = CGRectGetMinY(frame);
<span class="pl-c1">CGFloat</span> width = CGRectGetWidth(frame);
<span class="pl-c1">CGFloat</span> height = CGRectGetHeight(frame);</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-c1">CGRect</span> frame = self.view.frame;

<span class="pl-c1">CGFloat</span> x = frame.origin.x;
<span class="pl-c1">CGFloat</span> y = frame.origin.y;
<span class="pl-c1">CGFloat</span> width = frame.size.width;
<span class="pl-c1">CGFloat</span> height = frame.size.height;</pre></div>
<h2><a id="user-content-constants" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#constants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constants</h2>
<p>Constants are RECOMMENDED over in-line string literals or numbers, as they allow for easy reproduction of commonly used variables and can be quickly changed without the need for find and replace. Constants MUST be declared as <code>static</code> constants. Constants MAY be declared as <code>#define</code> when explicitly being used as a macro.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">static</span> <span class="pl-c1">NSString</span> * <span class="pl-k">const</span> NYTAboutViewControllerCompanyName = <span class="pl-s"><span class="pl-pds">@"</span>The New York Times Company<span class="pl-pds">"</span></span>;

<span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-c1">CGFloat</span> NYTImageThumbnailHeight = <span class="pl-c1">50.0</span>;</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre>#<span class="pl-k">define</span> <span class="pl-en">CompanyName</span> <span class="pl-s"><span class="pl-pds">@"</span>The New York Times Company<span class="pl-pds">"</span></span>

#<span class="pl-k">define</span> <span class="pl-en">thumbnailHeight</span> <span class="pl-c1">2</span></pre></div>
<h2><a id="user-content-enumerated-types" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#enumerated-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enumerated Types</h2>
<p>When using <code>enum</code>s, the new fixed underlying type specification MUST be used; it provides stronger type checking and code completion. The SDK includes a macro to facilitate and encourage use of fixed underlying types: <code>NS_ENUM()</code>.</p>
<p><strong>Example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">typedef</span> <span class="pl-en">NS_ENUM</span>(<span class="pl-c1">NSInteger</span>, NYTAdRequestState) {
    NYTAdRequestStateInactive,
    NYTAdRequestStateLoading
};</pre></div>
<h2><a id="user-content-bitmasks" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#bitmasks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bitmasks</h2>
<p>When working with bitmasks, the <code>NS_OPTIONS</code> macro MUST be used.</p>
<p><strong>Example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">typedef</span> <span class="pl-en">NS_OPTIONS</span>(<span class="pl-c1">NSUInteger</span>, NYTAdCategory) {
    NYTAdCategoryAutos      = <span class="pl-c1">1</span> &lt;&lt; <span class="pl-c1">0</span>,
    NYTAdCategoryJobs       = <span class="pl-c1">1</span> &lt;&lt; <span class="pl-c1">1</span>,
    NYTAdCategoryRealState  = <span class="pl-c1">1</span> &lt;&lt; <span class="pl-c1">2</span>,
    NYTAdCategoryTechnology = <span class="pl-c1">1</span> &lt;&lt; <span class="pl-c1">3</span>
};</pre></div>
<h2><a id="user-content-private-properties" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#private-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Private Properties</h2>
<p>Private properties SHALL be declared in class extensions (anonymous categories) in the implementation file of a class.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">@interface</span> <span class="pl-en">NYTAdvertisement</span> ()

<span class="pl-k">@property</span> (<span class="pl-k">nonatomic</span>, <span class="pl-k">strong</span>) GADBannerView *googleAdView;
<span class="pl-k">@property</span> (<span class="pl-k">nonatomic</span>, <span class="pl-k">strong</span>) ADBannerView *iAdView;
<span class="pl-k">@property</span> (<span class="pl-k">nonatomic</span>, <span class="pl-k">strong</span>) UIWebView *adXWebView;

<span class="pl-k">@end</span></pre></div>
<h2><a id="user-content-image-naming" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#image-naming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Image Naming</h2>
<p>Image names should be named consistently to preserve organization and developer sanity. Images SHOULD be named as one camel case string with a description of their purpose, followed by the un-prefixed name of the class or property they are customizing (if there is one), followed by a further description of color and/or placement, and finally their state.</p>
<p><strong>For example:</strong></p>
<ul>
<li><code>RefreshBarButtonItem</code> / <code>RefreshBarButtonItem@2x</code> and <code>RefreshBarButtonItemSelected</code> / <code>RefreshBarButtonItemSelected@2x</code></li>
<li><code>ArticleNavigationBarWhite</code> / <code>ArticleNavigationBarWhite@2x</code> and <code>ArticleNavigationBarBlackSelected</code> / <code>ArticleNavigationBarBlackSelected@2x</code>.</li>
</ul>
<p>Images that are used for a similar purpose SHOULD be grouped in respective groups in an Images folder or Asset Catalog.</p>
<h2><a id="user-content-booleans" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#booleans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Booleans</h2>
<p>Values MUST NOT be compared directly to <code>YES</code>, because <code>YES</code> is defined as <code>1</code>, and a <code>BOOL</code> in Objective-C is a <code>CHAR</code> type that is 8 bits long (so a value of <code>11111110</code> will return <code>NO</code> if compared to <code>YES</code>).</p>
<p><strong>For an object pointer:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">if</span> (!someObject) {
}

<span class="pl-k">if</span> (someObject == <span class="pl-c1">nil</span>) {
}</pre></div>
<p><strong>For a <code>BOOL</code> value:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">if</span> (isAwesome)
<span class="pl-k">if</span> (!someNumber.boolValue)
<span class="pl-k">if</span> (someNumber.boolValue == <span class="pl-c1">NO</span>)</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre><span class="pl-k">if</span> (isAwesome == <span class="pl-c1">YES</span>) <span class="pl-c"><span class="pl-c">//</span> Never do this.</span></pre></div>
<p>If the name of a <code>BOOL</code> property is expressed as an adjective, the property’s name MAY omit the <code>is</code> prefix but should specify the conventional name for the getter.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre>@property (assign, getter=isEditable) <span class="pl-c1">BOOL</span> editable;</pre></div>
<p><em>Text and example taken from the <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE" rel="nofollow">Cocoa Naming Guidelines</a>.</em></p>
<h2><a id="user-content-singletons" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#singletons"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Singletons</h2>
<p>Singleton objects SHOULD use a thread-safe pattern for creating their shared instance.</p>
<div class="highlight highlight-source-objc"><pre>+ (<span class="pl-k">instancetype</span>)sharedInstance {
    <span class="pl-k">static</span> <span class="pl-c1">id</span> sharedInstance = <span class="pl-c1">nil</span>;

    <span class="pl-k">static</span> <span class="pl-c1">dispatch_once_t</span> onceToken;
    <span class="pl-c1">dispatch_once</span>(&amp;onceToken, ^{
        sharedInstance = [[[<span class="pl-c1">self</span> <span class="pl-c1">class</span>] <span class="pl-c1">alloc</span>] <span class="pl-c1">init</span>];
    });

    <span class="pl-k">return</span> sharedInstance;
}</pre></div>
<p>This will prevent <a href="http://cocoasamurai.blogspot.com/2011/04/singletons-your-doing-them-wrong.html" rel="nofollow">possible and sometimes frequent crashes</a>.</p>
<h2><a id="user-content-imports" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#imports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Imports</h2>
<p>If there is more than one import statement, statements MUST be grouped <a href="http://ashfurrow.com/blog/structuring-modern-objective-c" rel="nofollow">together</a>. Groups MAY be commented.</p>
<p>Note: For modules use the <a href="http://clang.llvm.org/docs/Modules.html#using-modules" rel="nofollow">@import</a> syntax.</p>
<div class="highlight highlight-source-objc"><pre><span class="pl-c"><span class="pl-c">//</span> Frameworks</span>
@import QuartzCore;

<span class="pl-c"><span class="pl-c">//</span> Models</span>
#<span class="pl-k">import</span> <span class="pl-s"><span class="pl-pds">"</span>NYTUser.h<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">//</span> Views</span>
#<span class="pl-k">import</span> <span class="pl-s"><span class="pl-pds">"</span>NYTButton.h<span class="pl-pds">"</span></span>
#<span class="pl-k">import</span> <span class="pl-s"><span class="pl-pds">"</span>NYTUserView.h<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-protocols" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#protocols"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Protocols</h2>
<p>In a <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/DelegatesandDataSources/DelegatesandDataSources.html" rel="nofollow">delegate or data source protocol</a>, the first parameter to each method SHOULD be the object sending the message.</p>
<p>This helps disambiguate in cases when an object is the delegate for multiple similarly-typed objects, and it helps clarify intent to readers of a class implementing these delegate methods.</p>
<p><strong>For example:</strong></p>
<div class="highlight highlight-source-objc"><pre>- (<span class="pl-k">void</span>)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(<span class="pl-c1">NSIndexPath</span> *)indexPath;</pre></div>
<p><strong>Not:</strong></p>
<div class="highlight highlight-source-objc"><pre>- (<span class="pl-k">void</span>)didSelectTableRowAtIndexPath:(<span class="pl-c1">NSIndexPath</span> *)indexPath;</pre></div>
<h2><a id="user-content-xcode-project" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#xcode-project"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Xcode project</h2>
<p>The physical files SHOULD be kept in sync with the Xcode project files in order to avoid file sprawl. Any Xcode groups created SHOULD be reflected by folders in the filesystem. Code SHOULD be grouped not only by type, but also by feature for greater clarity.</p>
<p>Target Build Setting “Treat Warnings as Errors” SHOULD be enabled. Enable as many <a href="http://boredzo.org/blog/archives/2009-11-07/warnings" rel="nofollow">additional warnings</a> as possible. If you need to ignore a specific warning, use <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-pragmas" rel="nofollow">Clang’s pragma feature</a>.</p>
<h1><a id="user-content-other-objective-c-style-guides" class="anchor" aria-hidden="true" href="/coding-style-guide/objective-c.htm#other-objective-c-style-guides"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Other Objective-C Style Guides</h1>
<p>If ours doesn’t fit your tastes, have a look at some other style guides:</p>
<ul>
<li><a href="https://google.github.io/styleguide/objcguide.xml" rel="nofollow">Google</a></li>
<li><a href="https://github.com/github/objective-c-style-guide">GitHub</a></li>
<li><a href="https://trac.adium.im/wiki/CodingStyle" rel="nofollow">Adium</a></li>
<li><a href="https://gist.github.com/soffes/812796">Sam Soffes</a></li>
<li><a href="http://cocoadevcentral.com/articles/000082.php" rel="nofollow">CocoaDevCentral</a></li>
<li><a href="http://lukeredpath.co.uk/blog/2011/06/28/my-objective-c-style-guide/" rel="nofollow">Luke Redpath</a></li>
<li><a href="http://www.cimgf.com/zds-code-style-guide/" rel="nofollow">Marcus Zarra</a></li>
<li><a href="https://www.mediawiki.org/wiki/Wikimedia_Apps/Team/iOS/ObjectiveCStyleGuide" rel="nofollow">Wikimedia</a></li>
</ul>
</article>
  </div>

    </div>

  

  <details class="details-reset details-overlay details-overlay-dark">
    <summary data-hotkey="l" aria-label="Jump to line" role="button"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast linejump" aria-label="Jump to line" role="dialog" aria-modal="true">
      <!-- '"` --><!-- </textarea></xmp> --><form class="js-jump-to-line-form Box-body d-flex" action="https://github.com/ApvDatNM/coding-style-guide/blob/master/objective-c.md" accept-charset="UTF-8" method="get">
        <input class="form-control flex-auto mr-3 linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line…" aria-label="Jump to line" autofocus="">
        <button type="submit" class="btn" data-close-dialog="">Go</button>
</form>    </details-dialog>
  </details>

    <div class="Popover anim-scale-in js-tagsearch-popover" hidden="" data-tagsearch-url="/ApvDatNM/coding-style-guide/find-symbols" data-tagsearch-ref="master" data-tagsearch-path="objective-c.md" data-tagsearch-lang="Markdown" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:267247614,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/ApvDatNM/coding-style-guide/blob/master/objective-c.md?_pjax=%23js-repo-pjax-container&quot;,&quot;user_id&quot;:56908901}}" data-hydro-click-hmac="f161d9040f31cd0fe7fb35e8190d18c02cdfd7d1086ba2983bbe3c0ee52c4c5f">
  <div class="Popover-message Popover-message--large Popover-message--top-left TagsearchPopover mt-1 mb-4 mx-auto Box box-shadow-large">
    <div class="TagsearchPopover-content js-tagsearch-popover-content overflow-auto" style="will-change:transform;">
    </div>
  </div>
</div>



  </div>
</div>











</main>
  </div>
  

  </div>

        




  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 000 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 00.01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"></path></svg>
    </button>
    You can’t perform that action at this time.
  </div>


    <script crossorigin="anonymous" async="async" integrity="sha512-WcQmT2vhcClFVOaaAJV/M+HqsJ2Gq/myvl6F3gCVBxykazXTs+i5fvxncSXwyG1CSfcrqmLFw/R/bmFYzprX2A==" type="application/javascript" id="js-conditional-compat" data-src="https://github.githubassets.com/assets/compat-bootstrap-59c4264f.js"></script>
    <script crossorigin="anonymous" integrity="sha512-Y86V8OBlvF6I/7e56GKOOt80Yg1RTGA09uqFFX18aiBtevLbKGxB7sVpCn79fukppFIBqyBTB/s6l0Bhn0kidQ==" type="application/javascript" src="./objective-c_files/environment-bootstrap-63ce95f0.js"></script>
    <script crossorigin="anonymous" async="async" integrity="sha512-ASMgX6+DJ9LVZX/3Fj0RzibSpfigU83ubvsxxwriojWmuBM3faUp1108gypkhXpqLHEBQhIhjlzDOejzOFd0gA==" type="application/javascript" src="./objective-c_files/vendor-0123205f.js"></script>
    <script crossorigin="anonymous" async="async" integrity="sha512-+6Nd4aRFaWfNCioCSh16u4syBFdf0v/NceXHXkq09bWpEe5bbFHuNcTynuDOFo1rxyzp/d++LXUHy71vQuvVug==" type="application/javascript" src="./objective-c_files/frameworks-fba35de1.js"></script>
    
    <script crossorigin="anonymous" async="async" integrity="sha512-itwYIoc2+ZxRc9Us7Efw4Z6vlNNYS59N2hYQk7plNwD2rjvLq04WT64SOo9HPWe1pas8G8LCEGLT4+rApPrYgg==" type="application/javascript" src="./objective-c_files/github-bootstrap-8adc1822.js"></script>
    
        <script crossorigin="anonymous" async="async" integrity="sha512-urN6bhHnHu4C12A+cTH3dOp+CwLaycy2HUXr95hvu5pbYRdF8z6iR+UQcTZutQ6mZG3Njluw2MTZVCNmwcqh8g==" type="application/javascript" data-module-id="./randomColor.js" data-src="https://github.githubassets.com/assets/randomColor-bab37a6e.js"></script>
        <script crossorigin="anonymous" async="async" integrity="sha512-3Vk1NFIOm+TBUMM6pTA6DCUwwLLnc/QIT8jpENm71InvSU8O4p2plDagpst1tH1l+9jOBnneaXZnAskA9a2b3w==" type="application/javascript" data-module-id="./gist-vendor.js" data-src="https://github.githubassets.com/assets/gist-vendor-dd593534.js"></script>
        <script crossorigin="anonymous" async="async" integrity="sha512-4GcSWGoe36+BoWho4gtJcByZe8j43w+lt2/PDe3rmBxRVSgD29YipDwuIywe8fvOd2b2CszBqaPGxSznUtE3Xg==" type="application/javascript" data-module-id="./drag-drop.js" data-src="https://github.githubassets.com/assets/drag-drop-e0671258.js"></script>
    
    
  <div class="js-stale-session-flash flash flash-warn flash-banner" hidden="">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 000 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 00.01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg>
    <span class="js-stale-session-flash-signed-in" hidden="">You signed in with another tab or window. <a href="https://github.com/ApvDatNM/coding-style-guide/blob/master/objective-c.md">Reload</a> to refresh your session.</span>
    <span class="js-stale-session-flash-signed-out" hidden="">You signed out in another tab or window. <a href="https://github.com/ApvDatNM/coding-style-guide/blob/master/objective-c.md">Reload</a> to refresh your session.</span>
  </div>
  <template id="site-details-dialog"></template>

  <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box box-shadow-large" style="width:360px;"></div>
</div>


  


<div aria-live="polite" class="sr-only"></div><div aria-live="polite" class="sr-only"></div><span id="und-addon-container" data-w="36px" data-h="73px" style="height: 73px; width: 36px; right: 0px; left: auto; top: 40%; bottom: auto; margin-left: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; display: block;"><span id="und-addon-play-btn-up" class="und-addon-play-btn und-addon-play-side-right und-addon-btn-hoverable" style="background-image: url(&quot;chrome-extension://dbofniohnfjigodceiebfkcfdhncnici/img/arrow-up.svg&quot;); opacity: 0.4; width: 36px; height: 36px; display: block;"></span><span id="und-addon-play-btn-dn" class="und-addon-play-btn und-addon-play-side-right und-addon-btn-hoverable" style="background-image: url(&quot;chrome-extension://dbofniohnfjigodceiebfkcfdhncnici/img/arrow-dn.svg&quot;); opacity: 0.4; width: 36px; height: 36px; display: none; margin: 1px 0px 0px;"></span></span></body></html>